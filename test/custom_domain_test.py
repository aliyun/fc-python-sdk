import unittest
import os
import fc2
import logging

# generated by tls-gen tools
SERVER_CERT = '''-----BEGIN CERTIFICATE-----
MIID3zCCAsegAwIBAgIBATANBgkqhkiG9w0BAQsFADAxMSAwHgYDVQQDDBdUTFNH
ZW5TZWxmU2lnbmVkdFJvb3RDQTENMAsGA1UEBwwEJCQkJDAgFw0xOTA1MDcxMTU3
MzZaGA8yMTE5MDQxMzExNTczNlowVzFEMEIGA1UEAww7Ki5jbi1ob25na29uZy4x
MjIxOTY4Mjg3NjQ2MjI3LmNuYW1lLXRlc3QuZmMuYWxpeXVuLWluYy5jb20xDzAN
BgNVBAoMBnNlcnZlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANLB
yRAr2XeX35HCtMBnBi1aiip4Aw410GfMeRDKEY4bnrWvAcqXDMCa/6YSafc1Qc42
BuuoWHaW50LxfvhJQLGyvrqf/utKK4CKG/6FctE0RZqOl1mfaqg41bf0/CN6u0U8
TFNKsMbnf4dHX6ijoBbN85qO+Eem1nfrHJ49fd2U2kpm5RiR1wf8RoOhNBkRp6sB
YZIwhL0d1NcV4NDtznvpMgyymZ19fmKzmfT09Pfl8W/1WP333wlTKvUDwfwVI7Cn
CF2FbgeZyuPXhstapN0OPCLwpc/LEMU3d1pPlSuDCcr/bM7bJjiTcChCM8PPy9cY
Y35wWXs1/BMV0DqvGC8CAwEAAaOB2TCB1jAJBgNVHRMEAjAAMAsGA1UdDwQEAwIF
oDATBgNVHSUEDDAKBggrBgEFBQcDATBnBgNVHREEYDBegjsqLmNuLWhvbmdrb25n
LjEyMjE5NjgyODc2NDYyMjcuY25hbWUtdGVzdC5mYy5hbGl5dW4taW5jLmNvbYIU
YWxpLWx1b3NvbmdNYWMubG9jYWyCCWxvY2FsaG9zdDAdBgNVHQ4EFgQU9SBQBxy4
8i/yffJr7BgTGDv8YfcwHwYDVR0jBBgwFoAUwuBRRQqdUHVruV0qV86WN6SN04Iw
DQYJKoZIhvcNAQELBQADggEBAETlFsUgTEVj88Fg7/AhQK31846z8v1vWvtI8aiK
Z50m7gH7neCE3pKhU+K/GC85ft0TZvlM1EDRFKyduQiVc2pNdAjtR3FsUtkjkk5H
/WJwojKw1kU0B4BO2z7QYzAb7ns3Err9hHSciCY5hYel9YDMNpfjWjQYsKeAL6gL
sO1ac18LcDkuIVi1lOHqEgqJY9odMkmfDzBd1mLMc7QTbHUx7hp1vt56CqKHVt3N
CI5+nkOs34a0ZoHZG5HlpO41x9VPRQ84wRUbu053PWQzwoGaSmKRQziNiopID9yQ
MTEgXpjRsvTvqGRY56hGqHFhQueFxAMc+C6rbOiMewQ/bsU=
-----END CERTIFICATE-----
'''

SERVER_KEY = '''-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEA0sHJECvZd5ffkcK0wGcGLVqKKngDDjXQZ8x5EMoRjhueta8B
ypcMwJr/phJp9zVBzjYG66hYdpbnQvF++ElAsbK+up/+60orgIob/oVy0TRFmo6X
WZ9qqDjVt/T8I3q7RTxMU0qwxud/h0dfqKOgFs3zmo74R6bWd+scnj193ZTaSmbl
GJHXB/xGg6E0GRGnqwFhkjCEvR3U1xXg0O3Oe+kyDLKZnX1+YrOZ9PT09+Xxb/VY
/fffCVMq9QPB/BUjsKcIXYVuB5nK49eGy1qk3Q48IvClz8sQxTd3Wk+VK4MJyv9s
ztsmOJNwKEIzw8/L1xhjfnBZezX8ExXQOq8YLwIDAQABAoIBAG+xW4lCc+G5jzaE
ZZ6B+vgWP5r6N0RUqLoZ1x9at6sEYDwRH3XqT0vT2SB+KcJlaxaJ82j4sslGeBE2
Qv/6clq6S/JD0KmJiTx59RQSTSMp/KlIYFWS8sdsN3diUi3LYWvz5M9Pihgfn6pl
3QBWlwT+6NdEZbgzZv3ukCAcnpPK1PJLW4+Z96+Isdp9vuph6ssIwnOgfMJMIE9n
VgiZnJhHBGw/QxnH8Lx/JPgMNQBKp2DycnB6nGLlJROxmBsxvFb63tkW9AaDA3TC
HY5S8e3fgCzY+OlP3Ps71FsVlqvuMAiO26dx1BUYcB0QzjkYeQWLx340HOrI29sm
XzOK+kECgYEA8XEXG8r3eUyZj9RC7b/YtdfyhBaoi6/j9jT4sweYnr8VvcFHDUjl
SngekLtIFBlsp3uDVZh7nqMP4dKy39WYEUQWlE0IhkHjDvCZKFxGLEPNcXvz2V1E
lMH2VeZc9ReSF3mfKcN9p+++OK5tFVLjyxVL3phRO7neibb9ogCGYncCgYEA33cK
/TNhpXPqj4IdbnlLL5WH0pIujGL8Oy78Yh57YzNouJUZpkSIju1EGDzwcgoFxv6p
l9I9clUXrkETj3l4Jtm3PUkU8MD5YWjtgnz+ANVFDTFQEyj1tNzF9EN+NsD4UUqh
8r7Yngum622tw7VNZhq2oppiBPffMiznyCSt7gkCgYEA0fJhAc3wfA3bynHs8QhN
zXJGdA2v6ie8tq9BQ4xrbj8DDMowmqC0oZjqGzh/aNri3JBOl/PMKxnoCZpJ6NG3
NexbJgIGU5ifdLJKvAnhC0S6NOBwHqc3p5MyPWfflVA1vSwI9ywC7DFQ28DxIgW+
By4xlxIkMSdjF6WDz4ddU+kCgYByX5SBSbYVn8GTF+6GZ5Bi127ACM/ITLV6eS71
7VIL0PktWCrbncIjHS84FKCgTZ7tXdRhf1qx1Pmc13PygCJOCCqwNGKCYtKA19qQ
afb7aCzCdtXcKJ+xpTmwLoc/8P5nZQKEosduBNq3Lti8DWSC+PM3QDsg/dj/7lnn
Z1aaOQKBgQChmPrKD3p3TeWeH3y6pbuYjwI1boKKP2jARZMZy1IrXjfrcF77uNXH
3W9zX2fIwWHSrtMKso3DeLe7z44PSg8eB84yCiYQw94jJqZjEdqqVaJ4UIsQqHH2
JSJ6GfMeSrfQeFeXXMrlv2hA2+5RqxiT8v8R65wNukkp61rO4p/tqQ==
-----END RSA PRIVATE KEY-----
''' 


class TestCustomDomain(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        super(TestCustomDomain, self).__init__(*args, **kwargs)
        self.access_key_id = os.environ['ACCESS_KEY_ID']
        self.access_key_secret = os.environ['ACCESS_KEY_SECRET']
        self.endpoint = os.environ['ENDPOINT']
        self.domain_name = 'python-sdk.cn-hongkong.{0}.cname-test.functioncompute.com'.format(os.environ['ACCOUNT_ID'])

        self.client = fc2.Client(
            endpoint=self.endpoint,
            accessKeyID=self.access_key_id,
            accessKeySecret=self.access_key_secret,
            Timeout = 180
        )

    def setUp(self):
        try:
            self.client.delete_custom_domain(self.domain_name)
        except:
            pass

    def tearDown(self):
        try:
            self.client.delete_custom_domain(self.domain_name)
        except:
            pass

    def test_custom_domain(self):
        domain_name = self.domain_name

        # test create_custom_domain
        # 200
        logging.info('create custom domain: {0}'.format(domain_name))
        create_custom_domain_resp = self.client.create_custom_domain(domain_name).data
        self.check_custom_domain_response(create_custom_domain_resp, domain_name)

        # 400
        with self.assertRaises(fc2.FcError):
            self.client.create_custom_domain(domain_name)

        # test get_custom_domain

        # 200
        logging.info('get custom domain: {0}'.format(self.domain_name))
        get_custom_domain_resp = self.client.get_custom_domain(self.domain_name).data
        self.check_custom_domain_response(get_custom_domain_resp, self.domain_name)

        # test update_custom_domain
        routeConfig = {
            'routes': [
                {
                    'serviceName': 's1',
                    'functionName': 'f1',
                    'path': '/a',
                    'qualifier': None
                },
                {
                    'serviceName': 's2',
                    'functionName': 'f2',
                    'path': '/b',
                    'qualifier': None
                }
            ]
        }

        certConfig ={
            'certName': "test-ssl",
            'privateKey': SERVER_KEY,
            'certificate': SERVER_CERT
        }
        # 200
        logging.info(
            'update custom domain to HTTP,HTTPS: {0}'.format(self.domain_name))
        update_custom_domain_resp = self.client.update_custom_domain(self.domain_name, 'HTTP,HTTPS', routeConfig, certConfig=certConfig).data
        self.check_custom_domain_response(update_custom_domain_resp, self.domain_name, routeConfig, certConfig)
        
        logging.info('update custom domain to HTTP: {0}'.format(self.domain_name))
        update_custom_domain_resp = self.client.update_custom_domain(
            self.domain_name, 'HTTP', routeConfig).data
        self.check_custom_domain_response(
            update_custom_domain_resp, self.domain_name, routeConfig)
        # test list_custom_domains
        # 200
        logging.info('list custom domains: {0}'.format(self.domain_name))
        list_custom_domains_resp = self.client.list_custom_domains(prefix='pythonSDK').data
        self.assertEqual(1, len(list_custom_domains_resp))

      
        self.client.delete_custom_domain(self.domain_name)
        # create custdomain with cert
        create_custom_domain_resp = self.client.create_custom_domain(
            domain_name, 'HTTP,HTTPS', certConfig=certConfig).data
        self.check_custom_domain_response(
            create_custom_domain_resp, domain_name, certConfig=certConfig)

    def check_custom_domain_response(self, resp, domain_name, route_config=None, certConfig=None):
        self.assertEqual(resp['domainName'], domain_name)
        self.assertTrue('createdTime' in resp)
        self.assertTrue('lastModifiedTime' in resp)
        if route_config:
            respRoutes = resp['routeConfig']['routes']
            routes = route_config['routes']
            self.assertEqual(respRoutes[0]['serviceName'], routes[0]['serviceName'])
            self.assertEqual(respRoutes[1]['serviceName'], routes[1]['serviceName'])
            self.assertEqual(respRoutes[0]['path'], routes[0]['path'])
            self.assertEqual(respRoutes[1]['path'], routes[1]['path'])

        if certConfig:
            self.assertEqual(resp['certConfig']['certName'], certConfig['certName'])
            self.assertEqual(resp['certConfig']['certificate'], certConfig['certificate'])
            self.assertTrue(resp['certConfig']["privateKey"] is None)
